$(function(){
	var firmwareInfo = function(options){
		var $this = this;
		this.options = $.extend(options, {}, true);
		this.now = '';
		
		//创建按钮
		this.createButton = function(name, value){
			return $('<a href="javascript:;"></a>').html(name).attr({
				'title': name,
				'alt': name,
				'value': value
			});
		};
		//获取子选项
		this.getData = function(dataUrl, dom){
			$('.filter > .loading').show();
			if(browserInfo.name == 'ie')
				$('.filter > .loading').height($('.filter').height());
			if(dataUrl == '')
				return $this.getFirmware();
			$.getJSON(dataUrl, {
				'type' : deviceClass.now,
				'model' : deviceName.now,
				'productType' : productType.now,
				'productModel' : deviceModel.now,
				'version' : firmwareVersion.now
			}, function(data){
				dom.parent().show();
				if(data.length == 0)
					dom.append($('<div style="float:left; width:100px; text-align:center;">None</div>'));
				else
				{
					if(dom.attr('id') == 'versionTd')
						dom.append($this.createButton('All', '').addClass('on'));
					for(var i in data)
						dom.append($this.createButton(dom.attr('id') == 'productModelTd' ? data[i].name.replace('（8G定制版）', '(8GB)') : data[i].name, data[i].name));
					if($this.options.dom.attr('id') == 'typeTd')
						return $this.options.children.select(0);
					if(dom.attr('id') =='productTypeTd' && data.length == 1)
						return $this.options.children[0].select(0);
					else if(dom.attr('id') =='productTypeTd' && data.length != 1)
						$('#versionTr').hide();
				}
				$this.getFirmware();
			});
			return $this;
		};
		//获取固件
		this.getFirmware = function(){
			$.getJSON('firmware_list.action', {
				'type' : deviceClass.now,
				'model' : deviceName.now,
				'productType' : productType.now,
				'productModel' : deviceModel.now,
				'version' : firmwareVersion.now,
				"productState" : state.now,
				"isSetup" : steup.now
			}, function(data){
				$('#firmware_table').find('tbody').html('');
				for(var i in data)
				{
					$('#firmware_table').find('tbody').append($('<tr></tr>').append([
						$('<td></td>').html(data[i].model),
						$('<td></td>').html($.trim(data[i].productModel).length == 0 ? 'None' : data[i].productModel),
						$('<td></td>').html(data[i].productType),
						$('<td></td>').html(data[i].version).addClass('version'),
						$('<td></td>').html(data[i].sizes),
						$('<td>&nbsp;</td>').addClass(data[i].isSetup == 80 || data[i].isSetup == 120 ? 'yes' : 'no'),
						$('<td>&nbsp;</td>').addClass(data[i].productState == 60 || data[i].productState == 90 || data[i].productState == 120 ? 'yes' : 'no'),
						$('<td></td>').append($('<a href="javascript:;" title="Download"></a>').attr('download-url', data[i].downUrl).addClass('download').html('Download').on('click', function(){
							var version = $(this).parent().siblings('.version').html();
							var downloadUrl = $(this).attr('download-url');
							if(version.indexOf('beta') > -1)
							{
								ipsw_popup.show();
								ipsw_popup.dom.find('.yes').click(function(){
									ipsw_popup.hide();
									location.href = downloadUrl;
									return false;
								});
								ipsw_popup.dom.find('.no').on('click', function(){
									ipsw_popup.hide();
									return false;
								});
							}
							else
								location.href = downloadUrl;
							return false;
						}))
					]));
				}
				$('.filter > .loading').hide();
			});
			return $this;
		};
		//清除内容和选择
		this.clear = function(){
			$this.clearSelect();
			$this.options.dom.html('');
			if(typeof $this.options.dataUrl == 'object')
				for(var i in $this.options.dataUrl)
					$this.options.children[i].clear();
			else
				$this.options.children.clear();
			return $this;
		};
		//清除选择
		this.clearSelect = function(){
			$this.now = '';
			$this.options.dom.children().removeClass('on');
			return $this;
		};
		//选择
		this.select = function(i){
			
			//同级不能共存
			if($this.options.dom.attr('id') == 'productTypeTd')
				deviceModel.clearSelect();
			if($this.options.dom.attr('id') == 'productModelTd')
				productType.clearSelect();
			
			$this.now = $this.options.dom.children().eq(i).attr('value');
			$this.options.dom.children().eq(i).addClass('on').siblings().removeClass('on');
			if(deviceClass.now == '')
				return $this;
			if(typeof $this.options.dataUrl == 'object')
			{
				if($this.options.dataUrl != null)
				{
					//先全部清除数据
					for(var i in $this.options.dataUrl)
						$this.options.children[i].clear();
					//获取数据
					for(var i in $this.options.dataUrl)
						$this.getData($this.options.dataUrl[i], $this.options.children[i].options.dom);
				}
				else
					$this.getData('', '');
			}
			else
			{
				$this.options.children.clear();
				$this.getData($this.options.dataUrl, $this.options.children.options.dom);
			}
			
			return $this;
		};
		//初始化
		this.init = function(){
			$this.options.dom.on('click', 'a', function(){
				$this.select($(this).index());
			});
			return $this;
		};
	}
	
	var state = new firmwareInfo({
		'dom': $('#productStateTd'),
		'children': null,
		'dataUrl': null
	});
	
	var steup = new firmwareInfo({
		'dom': $('#setupTd'),
		'children': null,
		'dataUrl': null
	});
	
	var firmwareVersion = new firmwareInfo({
		'dom': $('#versionTd'),
		'children': null,
		'dataUrl': null
	});
	
	var productType = new firmwareInfo({
		'dom': $('#productTypeTd'),
		'children': firmwareVersion,
		'dataUrl': 'firmware_iosVersions.action'
	});
	
	var deviceModel = new firmwareInfo({
		'dom': $('#productModelTd'),
		'children': firmwareVersion,
		'dataUrl': 'firmware_iosVersions.action'
	});
	
	var deviceName = new firmwareInfo({
		'dom': $('#modelTd'),
		'children': [productType, deviceModel],
		'dataUrl': ['firmware_productTypes.action', 'firmware_productModels.action']
	});
	
	var deviceClass = new firmwareInfo({
		'dom': $('#typeTd'),
		'children': deviceName,
		'dataUrl': 'firmware_mobiles.action'
	});
	state.init().select(0);
	steup.init().select(0);
	firmwareVersion.init();
	productType.init();
	deviceModel.init();
	deviceName.init();
	
	var classArr =  {'iPhone': 0, 'iPad': 1, 'iPodTouch': 2};
	deviceClass.init().select($("#map_type").val().length > 0 && (typeof classArr[$("#map_type").val()] != 'undefined') ? classArr[$("#map_type").val()] : 0);
});